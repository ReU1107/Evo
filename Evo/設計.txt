マテリアル毎にソートする
　→レンダリング方法が同じもの同士でまとめる
　→static,dynamicでまとめる
　→メッシュにも影響する。



At()関数は範囲チェックを行う
[]演算子は範囲チェックを行わない
速度を求め、範囲の安全性を完璧に扱えるなら[]を使うようにする。

ランダムアクセス↑の2つの関数が
必要な場合以外は、イテレーターのみの実装にする。
(全部の要素にアクセスしたく、単一の要素にアクセスしなくていい場合)

イテレーター、ランダムアクセス
による繰り返し処理のオーバーヘッドは同程度

コンポーネントクラスの最後に必ずComponentをつける
助長になったとしても分別が必要と思う

関数内部で変更がある引数に関してはわかりやすくする
例:
void A(float* a)
{
 a = 1.0f;
}
呼び出し側
float a;
A(&a);
↑変更しますよと一見してわかりやすい
逆に変更しないものはつけないようにする
void B(const float& b)
{
  b;
}
呼び出し側
float b;
B(b);

名前空間はAlphaまで
Graphicsなんかはつけない
理由:
助長になるそこまでして被りが発生することもないと思う為
どうしてもそんな状況に陥ったらクラス名の方を見直すようにする

templateクラスには頭文字にTをつける
templateの引数にはclassではなくtypenameにする
クラスだけではないため

Arithmetic:算術
